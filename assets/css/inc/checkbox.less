@gutter-width: 2em;

// Negative mode.
@neg-colour: #c29088;
@neg-track-border-colour: #704e49;
@neg-knob-colour: #c9513e;
// Highlights.
@neg-colour-h: #e3b8b1;
@neg-track-border-colour-h: #855c56;
@neg-knob-colour-h: #e8634f;

label.option, [role=checkbox] > label {
  display: inline-flex;
}

input[type=checkbox].switch {
  // Remove browser UI from flow.
  position: absolute;
  visibility: hidden;

  @checked-colour: #91b3c2;
  @track-height: 1.4ex;
  @track-margin: .6em;
  @transition-time: .15s;

  // Selected text.
  + span {
    // Enforce consistent child display modes between option and non-option variants.
    display: inline-flex;

    position: relative;
    padding-left: @gutter-width + @track-margin;

    // Track elements.
    &:before, &:after {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
    }

    // Gutter.
    &:before {
      height: @track-height;
      width: @gutter-width;

      background: #172230;
      border: 1px solid #718fa5;
      border-radius: 1em;

      transition: @transition-time;
    }

    // Knob.
    &:after {
      height: calc(@track-height - .2ex);
      width: $height;
      left: .11em;

      background: #a0b7c3;
      border-radius: 1em;
      transition: @transition-time;
    }

    &:hover {
      color: #dae8eb;

      &:before {
        border-color: #819eb3;
      }

      &:after {
        background: #c0d7e3;
      }
    }

    // Deselected text.
    + span {
      order: -1;
      // Don't know where this 3px comes from but it is needed at 100% and 200% font sizes.
      margin-right: calc(@track-margin - 3px);
    }
  }

  &:checked {
    + span {
      color: @checked-colour;

      &:after {
        left: 1.98em;
        transform: translate(-100%, -50%);
      }
    }

    &:hover + span {
      color: #b1d4e3;

      &:before {
        border-color: #477a9e;
      }

      &:after {
        background: #87dbff;
      }
    }
  }

  // Negative mode: checkbox represents an option that is exclusionary.
  label.neg >& {
    &:checked {
      + span {
        color: @neg-colour;

        &:before {
          border-color: @neg-track-border-colour;
        }

        &:after {
          background: @neg-knob-colour;
        }
      }

      &:hover + span {
        color: @neg-colour-h;

        &:before {
          border-color: @neg-track-border-colour-h;
        }

        &:after {
          background: @neg-knob-colour-h;
        }
      }
    }
  }

  // Option mode: checkbox represents two either/or options rather than one option in an on/off state.
  label.option >& {
    &:not(:checked) {
      + span + span {
        color: @checked-colour;
      }
      + span {
        color: inherit;
      }

      &:hover {
        + span + span {
          // Copy text highlight colour.
          &:extend(input[type=checkbox].switch:checked:hover + span);
        }
        + span {
          // Copy track highlights.
          &:extend(input[type=checkbox].switch:checked:hover + span all);

          // Avoid applying text highlight to deselected option.
          color: inherit;
        }
      }
    }
  }

  // In option mode the track never dims because it is never "off". Otherwise, these are just further checked states.
  &:checked, label.option >& {
    + span {
      // Gutter.
      &:before {
        background: #15232b;
        border-color: #396d93;
      }

      // Knob.
      &:after {
        background: #70D1FB;
      }
    }
  }

  ~ span {
    line-height: 1.2;

    transition: color @transition-time;
  }
}

// Tri-state mode.
[role=checkbox] {
  // Hide browser radio controls.
  input:extend(input[type=checkbox].switch) {}

  >label {
    > input {
      // Copy track and gutter styles.
      + span:extend(input[type=checkbox].switch + span all) {}

      // Indeterminate state.
      &:checked {
        + span:after {
          left: (@gutter-width / 2);
          transform: translate(-44%, -50%);
        }

        &:hover {
          // Copy track unchecked highlights.
          + span:extend(input[type=checkbox].switch + span:hover all) {
            // Copy text unchecked colour.
            + span:extend(input[type=checkbox].switch + span:hover) {}
          }
        }
      }
    }
  }

  // Far-right state.
  &[aria-checked="true"] {
    input:extend(input[type=checkbox].switch:checked all) {}
  }

  // Far-left state.
  &[aria-checked="false"] {
    input + span {
      color: inherit;

      &:before {
        border-color: @neg-track-border-colour;
      }

      &:after {
        // Copy positioning from unchecked state.
        &:extend(input[type=checkbox].switch + span:after);

        transform: translateY(-50%);

        background: @neg-knob-colour;
      }

      + span {
        color: @neg-colour;
      }
    }

    &:hover {
      input + span {
        &:before {
          border-color: @neg-track-border-colour-h;
        }

        &:after {
          background: @neg-knob-colour-h;
        }

        + span {
          color: @neg-colour-h;
        }
      }
    }
  }
}
