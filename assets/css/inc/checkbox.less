@hover-filter: brightness(118%) saturate(86%);

label.option {
  display: inline-flex;

  &:hover {
    filter: @hover-filter;
  }
}

input[type=checkbox] {
  // Remove browser UI from flow.
  position: absolute;
  visibility: hidden;

  @checked-colour: #91c2b3;
  @gutter-width: 2em;
  @track-margin: .6em;
  @transition-time: .15s;

  &:checked {
    + span {
      color: @checked-colour;

      &:after {
        left: 2.1em;
        transform: translate(-100%, 0);
      }
    }
  }
  label.option >& {
    &:not(:checked) {
      + span + span {
        color: @checked-colour;
      }
      + span {
        color: inherit;
      }
    }
  }

  // Selected text.
  + span {
    // Enforce consistent child display modes between option and non-option variants.
    display: flex;
    position: relative;
    padding-left: @gutter-width + @track-margin;

    // Track elements.
    &:before, &:after {
      content: '';
      position: absolute;
      left: 0;
    }

    // Gutter.
    &:before {
      height: .7em;
      width: @gutter-width;
      top: .3em;

      background: #172230;
      border: 1px solid #718fa5;
      border-radius: 1em;

      transition: @transition-time;
    }

    // Knob.
    &:after {
      height: .73em;
      width: .75em;
      top: .33885em;

      background: #a0b7c3;
      border-radius: 1em;
      transition: .15s;
    }

    // Deselected text.
    + span {
      order: -1;
      // Don't know where this 3px comes from but it is needed at 100% and 200% font sizes.
      margin-right: calc(@track-margin - 3px);
    }
  }

  // In option mode, track never dims. Otherwise, these are just checked states.
  &:checked, label.option >& {
    + span {
      // Gutter.
      &:before {
        background: #15232b;
        border-color: #396d93;
      }

      // Knob.
      &:after {
        background: #34c99f;
      }
    }
  }

  ~ span {
    transition: color @transition-time;
  }

  :not(label.option) >& + span:hover {
    filter: @hover-filter;
  }
}
